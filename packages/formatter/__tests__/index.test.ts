import { format } from '../src/index'

describe('@firestore-rules/formatter index.ts format', () => {
  const value = `// !!! DO NOT EDIT !!!
// This file is generated by @firestore-rules/cli
rules_version = "2";
service cloud.firestore {
match /databases/{database}/documents {
function isAuthenticated() {
    return (request.auth != null);
}
function isMe(uid) {
    return (isAuthenticated() && (uid == request.auth.uid));
}
match /users/{uid} {
allow get: if isMe(uid);
allow create: if isAuthenticated();
allow update: if isMe(uid);
}
}
}`
  it('format with space 2', () => {
    expect(format(value, { indent: 'space', indentSize: 2 }))
      .toEqual(`// !!! DO NOT EDIT !!!
// This file is generated by @firestore-rules/cli
rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return (request.auth != null);
    }
    function isMe(uid) {
      return (isAuthenticated() && (uid == request.auth.uid));
    }
    match /users/{uid} {
      allow get: if isMe(uid);
      allow create: if isAuthenticated();
      allow update: if isMe(uid);
    }
  }
}`)
  })

  it('format with space 4', () => {
    expect(format(value, { indent: 'space', indentSize: 4 }))
      .toEqual(`// !!! DO NOT EDIT !!!
// This file is generated by @firestore-rules/cli
rules_version = "2";
service cloud.firestore {
    match /databases/{database}/documents {
        function isAuthenticated() {
            return (request.auth != null);
        }
        function isMe(uid) {
            return (isAuthenticated() && (uid == request.auth.uid));
        }
        match /users/{uid} {
            allow get: if isMe(uid);
            allow create: if isAuthenticated();
            allow update: if isMe(uid);
        }
    }
}`)
  })

  it('format with tab 1', () => {
    expect(format(value, { indent: 'tab', indentSize: 1 }))
      .toEqual(`// !!! DO NOT EDIT !!!
// This file is generated by @firestore-rules/cli
rules_version = "2";
service cloud.firestore {
\tmatch /databases/{database}/documents {
\t\tfunction isAuthenticated() {
\t\t\treturn (request.auth != null);
\t\t}
\t\tfunction isMe(uid) {
\t\t\treturn (isAuthenticated() && (uid == request.auth.uid));
\t\t}
\t\tmatch /users/{uid} {
\t\t\tallow get: if isMe(uid);
\t\t\tallow create: if isAuthenticated();
\t\t\tallow update: if isMe(uid);
\t\t}
\t}
}`)
  })
})
